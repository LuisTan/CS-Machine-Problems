Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> init body
Rule 2     program -> init
Rule 3     program -> body
Rule 4     init -> VARIABLES { vardecnames }
Rule 5     vardecnames -> INTEGER NAME vardecnames
Rule 6     vardecnames -> FLOAT NAME vardecnames
Rule 7     vardecnames -> STRING NAME vardecnames
Rule 8     vardecnames -> ARRAY NAME vardecnames
Rule 9     vardecnames -> INTEGER NAME
Rule 10    vardecnames -> FLOAT NAME
Rule 11    vardecnames -> STRING NAME
Rule 12    vardecnames -> ARRAY NAME
Rule 13    body -> body statement
Rule 14    body -> statement
Rule 15    statement -> PAKITA ( NAME )
Rule 16    statement -> PAKITA ( LITSTRING )
Rule 17    statement -> BASA ( NAME )
Rule 18    statement -> NAME EQUAL expression
Rule 19    statement -> NAME [ expression ] EQUAL expression
Rule 20    statement -> DAGDAG ( NAME , expression )
Rule 21    statement -> BURA ( NAME , expression )
Rule 22    statement -> PAG ( cond ) { body }
Rule 23    statement -> PAG ( cond ) { body } elseblocks
Rule 24    statement -> HABANG ( cond ) { body }
Rule 25    elseblocks -> elseifblock
Rule 26    elseblocks -> elseblock
Rule 27    elseblock -> KUNDI { body }
Rule 28    elseifblock -> KUNDIPAG ( cond ) { body } elseblocks
Rule 29    cond -> expression ISEQUAL expression
Rule 30    cond -> expression NE expression
Rule 31    cond -> expression GTE expression
Rule 32    cond -> expression LTE expression
Rule 33    cond -> expression LT expression
Rule 34    cond -> expression GT expression
Rule 35    expression -> expression PLUS expression
Rule 36    expression -> expression MINUS expression
Rule 37    expression -> expression TIMES expression
Rule 38    expression -> expression DIVIDE expression
Rule 39    expression -> expression POWER expression
Rule 40    expression -> expression MODULO expression
Rule 41    expression -> MINUS expression
Rule 42    expression -> ( expression )
Rule 43    expression -> LITSTRING
Rule 44    expression -> LITINTEGER
Rule 45    expression -> LITFLOAT
Rule 46    expression -> NAME
Rule 47    expression -> SAMA ( NAME , NAME )
Rule 48    expression -> SAMA ( NAME , LITSTRING )
Rule 49    expression -> SAMA ( LITSTRING , NAME )
Rule 50    expression -> HABA ( NAME )
Rule 51    expression -> HANAP ( NAME , NAME )
Rule 52    expression -> HANAP ( NAME , LITSTRING )
Rule 53    expression -> HANAP ( LITSTRING , NAME )
Rule 54    expression -> SA ( NAME , expression )
Rule 55    expression -> NAME [ expression ]

Terminals, with rules where they appear

(                    : 15 16 17 20 21 22 23 24 28 42 47 48 49 50 51 52 53 54
)                    : 15 16 17 20 21 22 23 24 28 42 47 48 49 50 51 52 53 54
,                    : 20 21 47 48 49 51 52 53 54
ARRAY                : 8 12
BASA                 : 17
BURA                 : 21
DAGDAG               : 20
DIVIDE               : 38
EQUAL                : 18 19
FLOAT                : 6 10
GT                   : 34
GTE                  : 31
HABA                 : 50
HABANG               : 24
HANAP                : 51 52 53
INTEGER              : 5 9
ISEQUAL              : 29
KUNDI                : 27
KUNDIPAG             : 28
LITFLOAT             : 45
LITINTEGER           : 44
LITSTRING            : 16 43 48 49 52 53
LT                   : 33
LTE                  : 32
MINUS                : 36 41
MODULO               : 40
NAME                 : 5 6 7 8 9 10 11 12 15 17 18 19 20 21 46 47 47 48 49 50 51 51 52 53 54 55
NE                   : 30
PAG                  : 22 23
PAKITA               : 15 16
PLUS                 : 35
POWER                : 39
SA                   : 54
SAMA                 : 47 48 49
STRING               : 7 11
TIMES                : 37
VARIABLES            : 4
[                    : 19 55
]                    : 19 55
error                : 
{                    : 4 22 23 24 27 28
}                    : 4 22 23 24 27 28

Nonterminals, with rules where they appear

body                 : 1 3 13 22 23 24 27 28
cond                 : 22 23 24 28
elseblock            : 26
elseblocks           : 23 28
elseifblock          : 25
expression           : 18 19 19 20 21 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 54 55
init                 : 1 2
program              : 0
statement            : 13 14
vardecnames          : 4 5 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init body
    (2) program -> . init
    (3) program -> . body
    (4) init -> . VARIABLES { vardecnames }
    (13) body -> . body statement
    (14) body -> . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    VARIABLES       shift and go to state 12
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    program                        shift and go to state 10
    init                           shift and go to state 5
    statement                      shift and go to state 3
    body                           shift and go to state 4

state 1

    (24) statement -> HABANG . ( cond ) { body }

    (               shift and go to state 13


state 2

    (15) statement -> PAKITA . ( NAME )
    (16) statement -> PAKITA . ( LITSTRING )

    (               shift and go to state 14


state 3

    (14) body -> statement .

    }               reduce using rule 14 (body -> statement .)
    PAKITA          reduce using rule 14 (body -> statement .)
    BASA            reduce using rule 14 (body -> statement .)
    NAME            reduce using rule 14 (body -> statement .)
    DAGDAG          reduce using rule 14 (body -> statement .)
    BURA            reduce using rule 14 (body -> statement .)
    PAG             reduce using rule 14 (body -> statement .)
    HABANG          reduce using rule 14 (body -> statement .)
    $end            reduce using rule 14 (body -> statement .)


state 4

    (3) program -> body .
    (13) body -> body . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    $end            reduce using rule 3 (program -> body .)
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 15

state 5

    (1) program -> init . body
    (2) program -> init .
    (13) body -> . body statement
    (14) body -> . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    $end            reduce using rule 2 (program -> init .)
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    body                           shift and go to state 16
    statement                      shift and go to state 3

state 6

    (21) statement -> BURA . ( NAME , expression )

    (               shift and go to state 17


state 7

    (18) statement -> NAME . EQUAL expression
    (19) statement -> NAME . [ expression ] EQUAL expression

    EQUAL           shift and go to state 19
    [               shift and go to state 18


state 8

    (17) statement -> BASA . ( NAME )

    (               shift and go to state 20


state 9

    (22) statement -> PAG . ( cond ) { body }
    (23) statement -> PAG . ( cond ) { body } elseblocks

    (               shift and go to state 21


state 10

    (0) S' -> program .



state 11

    (20) statement -> DAGDAG . ( NAME , expression )

    (               shift and go to state 22


state 12

    (4) init -> VARIABLES . { vardecnames }

    {               shift and go to state 23


state 13

    (24) statement -> HABANG ( . cond ) { body }
    (29) cond -> . expression ISEQUAL expression
    (30) cond -> . expression NE expression
    (31) cond -> . expression GTE expression
    (32) cond -> . expression LTE expression
    (33) cond -> . expression LT expression
    (34) cond -> . expression GT expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    cond                           shift and go to state 24
    expression                     shift and go to state 27

state 14

    (15) statement -> PAKITA ( . NAME )
    (16) statement -> PAKITA ( . LITSTRING )

    NAME            shift and go to state 37
    LITSTRING       shift and go to state 36


state 15

    (13) body -> body statement .

    }               reduce using rule 13 (body -> body statement .)
    PAKITA          reduce using rule 13 (body -> body statement .)
    BASA            reduce using rule 13 (body -> body statement .)
    NAME            reduce using rule 13 (body -> body statement .)
    DAGDAG          reduce using rule 13 (body -> body statement .)
    BURA            reduce using rule 13 (body -> body statement .)
    PAG             reduce using rule 13 (body -> body statement .)
    HABANG          reduce using rule 13 (body -> body statement .)
    $end            reduce using rule 13 (body -> body statement .)


state 16

    (1) program -> init body .
    (13) body -> body . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    $end            reduce using rule 1 (program -> init body .)
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 15

state 17

    (21) statement -> BURA ( . NAME , expression )

    NAME            shift and go to state 38


state 18

    (19) statement -> NAME [ . expression ] EQUAL expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 39

state 19

    (18) statement -> NAME EQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 40

state 20

    (17) statement -> BASA ( . NAME )

    NAME            shift and go to state 41


state 21

    (22) statement -> PAG ( . cond ) { body }
    (23) statement -> PAG ( . cond ) { body } elseblocks
    (29) cond -> . expression ISEQUAL expression
    (30) cond -> . expression NE expression
    (31) cond -> . expression GTE expression
    (32) cond -> . expression LTE expression
    (33) cond -> . expression LT expression
    (34) cond -> . expression GT expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    cond                           shift and go to state 42
    expression                     shift and go to state 27

state 22

    (20) statement -> DAGDAG ( . NAME , expression )

    NAME            shift and go to state 43


state 23

    (4) init -> VARIABLES { . vardecnames }
    (5) vardecnames -> . INTEGER NAME vardecnames
    (6) vardecnames -> . FLOAT NAME vardecnames
    (7) vardecnames -> . STRING NAME vardecnames
    (8) vardecnames -> . ARRAY NAME vardecnames
    (9) vardecnames -> . INTEGER NAME
    (10) vardecnames -> . FLOAT NAME
    (11) vardecnames -> . STRING NAME
    (12) vardecnames -> . ARRAY NAME

    INTEGER         shift and go to state 46
    FLOAT           shift and go to state 48
    STRING          shift and go to state 44
    ARRAY           shift and go to state 45

    vardecnames                    shift and go to state 47

state 24

    (24) statement -> HABANG ( cond . ) { body }

    )               shift and go to state 49


state 25

    (50) expression -> HABA . ( NAME )

    (               shift and go to state 50


state 26

    (44) expression -> LITINTEGER .

    ]               reduce using rule 44 (expression -> LITINTEGER .)
    PLUS            reduce using rule 44 (expression -> LITINTEGER .)
    MINUS           reduce using rule 44 (expression -> LITINTEGER .)
    TIMES           reduce using rule 44 (expression -> LITINTEGER .)
    DIVIDE          reduce using rule 44 (expression -> LITINTEGER .)
    POWER           reduce using rule 44 (expression -> LITINTEGER .)
    MODULO          reduce using rule 44 (expression -> LITINTEGER .)
    PAKITA          reduce using rule 44 (expression -> LITINTEGER .)
    BASA            reduce using rule 44 (expression -> LITINTEGER .)
    NAME            reduce using rule 44 (expression -> LITINTEGER .)
    DAGDAG          reduce using rule 44 (expression -> LITINTEGER .)
    BURA            reduce using rule 44 (expression -> LITINTEGER .)
    PAG             reduce using rule 44 (expression -> LITINTEGER .)
    HABANG          reduce using rule 44 (expression -> LITINTEGER .)
    $end            reduce using rule 44 (expression -> LITINTEGER .)
    }               reduce using rule 44 (expression -> LITINTEGER .)
    ISEQUAL         reduce using rule 44 (expression -> LITINTEGER .)
    NE              reduce using rule 44 (expression -> LITINTEGER .)
    GTE             reduce using rule 44 (expression -> LITINTEGER .)
    LTE             reduce using rule 44 (expression -> LITINTEGER .)
    LT              reduce using rule 44 (expression -> LITINTEGER .)
    GT              reduce using rule 44 (expression -> LITINTEGER .)
    )               reduce using rule 44 (expression -> LITINTEGER .)


state 27

    (29) cond -> expression . ISEQUAL expression
    (30) cond -> expression . NE expression
    (31) cond -> expression . GTE expression
    (32) cond -> expression . LTE expression
    (33) cond -> expression . LT expression
    (34) cond -> expression . GT expression
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ISEQUAL         shift and go to state 62
    NE              shift and go to state 58
    GTE             shift and go to state 61
    LTE             shift and go to state 52
    LT              shift and go to state 59
    GT              shift and go to state 53
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 28

    (46) expression -> NAME .
    (55) expression -> NAME . [ expression ]

    ]               reduce using rule 46 (expression -> NAME .)
    PLUS            reduce using rule 46 (expression -> NAME .)
    MINUS           reduce using rule 46 (expression -> NAME .)
    TIMES           reduce using rule 46 (expression -> NAME .)
    DIVIDE          reduce using rule 46 (expression -> NAME .)
    POWER           reduce using rule 46 (expression -> NAME .)
    MODULO          reduce using rule 46 (expression -> NAME .)
    PAKITA          reduce using rule 46 (expression -> NAME .)
    BASA            reduce using rule 46 (expression -> NAME .)
    NAME            reduce using rule 46 (expression -> NAME .)
    DAGDAG          reduce using rule 46 (expression -> NAME .)
    BURA            reduce using rule 46 (expression -> NAME .)
    PAG             reduce using rule 46 (expression -> NAME .)
    HABANG          reduce using rule 46 (expression -> NAME .)
    $end            reduce using rule 46 (expression -> NAME .)
    }               reduce using rule 46 (expression -> NAME .)
    ISEQUAL         reduce using rule 46 (expression -> NAME .)
    NE              reduce using rule 46 (expression -> NAME .)
    GTE             reduce using rule 46 (expression -> NAME .)
    LTE             reduce using rule 46 (expression -> NAME .)
    LT              reduce using rule 46 (expression -> NAME .)
    GT              reduce using rule 46 (expression -> NAME .)
    )               reduce using rule 46 (expression -> NAME .)
    [               shift and go to state 63


state 29

    (43) expression -> LITSTRING .

    ]               reduce using rule 43 (expression -> LITSTRING .)
    PLUS            reduce using rule 43 (expression -> LITSTRING .)
    MINUS           reduce using rule 43 (expression -> LITSTRING .)
    TIMES           reduce using rule 43 (expression -> LITSTRING .)
    DIVIDE          reduce using rule 43 (expression -> LITSTRING .)
    POWER           reduce using rule 43 (expression -> LITSTRING .)
    MODULO          reduce using rule 43 (expression -> LITSTRING .)
    PAKITA          reduce using rule 43 (expression -> LITSTRING .)
    BASA            reduce using rule 43 (expression -> LITSTRING .)
    NAME            reduce using rule 43 (expression -> LITSTRING .)
    DAGDAG          reduce using rule 43 (expression -> LITSTRING .)
    BURA            reduce using rule 43 (expression -> LITSTRING .)
    PAG             reduce using rule 43 (expression -> LITSTRING .)
    HABANG          reduce using rule 43 (expression -> LITSTRING .)
    $end            reduce using rule 43 (expression -> LITSTRING .)
    }               reduce using rule 43 (expression -> LITSTRING .)
    ISEQUAL         reduce using rule 43 (expression -> LITSTRING .)
    NE              reduce using rule 43 (expression -> LITSTRING .)
    GTE             reduce using rule 43 (expression -> LITSTRING .)
    LTE             reduce using rule 43 (expression -> LITSTRING .)
    LT              reduce using rule 43 (expression -> LITSTRING .)
    GT              reduce using rule 43 (expression -> LITSTRING .)
    )               reduce using rule 43 (expression -> LITSTRING .)


state 30

    (41) expression -> MINUS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 64

state 31

    (47) expression -> SAMA . ( NAME , NAME )
    (48) expression -> SAMA . ( NAME , LITSTRING )
    (49) expression -> SAMA . ( LITSTRING , NAME )

    (               shift and go to state 65


state 32

    (51) expression -> HANAP . ( NAME , NAME )
    (52) expression -> HANAP . ( NAME , LITSTRING )
    (53) expression -> HANAP . ( LITSTRING , NAME )

    (               shift and go to state 66


state 33

    (42) expression -> ( . expression )
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 67

state 34

    (45) expression -> LITFLOAT .

    ]               reduce using rule 45 (expression -> LITFLOAT .)
    PLUS            reduce using rule 45 (expression -> LITFLOAT .)
    MINUS           reduce using rule 45 (expression -> LITFLOAT .)
    TIMES           reduce using rule 45 (expression -> LITFLOAT .)
    DIVIDE          reduce using rule 45 (expression -> LITFLOAT .)
    POWER           reduce using rule 45 (expression -> LITFLOAT .)
    MODULO          reduce using rule 45 (expression -> LITFLOAT .)
    PAKITA          reduce using rule 45 (expression -> LITFLOAT .)
    BASA            reduce using rule 45 (expression -> LITFLOAT .)
    NAME            reduce using rule 45 (expression -> LITFLOAT .)
    DAGDAG          reduce using rule 45 (expression -> LITFLOAT .)
    BURA            reduce using rule 45 (expression -> LITFLOAT .)
    PAG             reduce using rule 45 (expression -> LITFLOAT .)
    HABANG          reduce using rule 45 (expression -> LITFLOAT .)
    $end            reduce using rule 45 (expression -> LITFLOAT .)
    }               reduce using rule 45 (expression -> LITFLOAT .)
    ISEQUAL         reduce using rule 45 (expression -> LITFLOAT .)
    NE              reduce using rule 45 (expression -> LITFLOAT .)
    GTE             reduce using rule 45 (expression -> LITFLOAT .)
    LTE             reduce using rule 45 (expression -> LITFLOAT .)
    LT              reduce using rule 45 (expression -> LITFLOAT .)
    GT              reduce using rule 45 (expression -> LITFLOAT .)
    )               reduce using rule 45 (expression -> LITFLOAT .)


state 35

    (54) expression -> SA . ( NAME , expression )

    (               shift and go to state 68


state 36

    (16) statement -> PAKITA ( LITSTRING . )

    )               shift and go to state 69


state 37

    (15) statement -> PAKITA ( NAME . )

    )               shift and go to state 70


state 38

    (21) statement -> BURA ( NAME . , expression )

    ,               shift and go to state 71


state 39

    (19) statement -> NAME [ expression . ] EQUAL expression
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               shift and go to state 72
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 40

    (18) statement -> NAME EQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    PAKITA          reduce using rule 18 (statement -> NAME EQUAL expression .)
    BASA            reduce using rule 18 (statement -> NAME EQUAL expression .)
    NAME            reduce using rule 18 (statement -> NAME EQUAL expression .)
    DAGDAG          reduce using rule 18 (statement -> NAME EQUAL expression .)
    BURA            reduce using rule 18 (statement -> NAME EQUAL expression .)
    PAG             reduce using rule 18 (statement -> NAME EQUAL expression .)
    HABANG          reduce using rule 18 (statement -> NAME EQUAL expression .)
    $end            reduce using rule 18 (statement -> NAME EQUAL expression .)
    }               reduce using rule 18 (statement -> NAME EQUAL expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 41

    (17) statement -> BASA ( NAME . )

    )               shift and go to state 73


state 42

    (22) statement -> PAG ( cond . ) { body }
    (23) statement -> PAG ( cond . ) { body } elseblocks

    )               shift and go to state 74


state 43

    (20) statement -> DAGDAG ( NAME . , expression )

    ,               shift and go to state 75


state 44

    (7) vardecnames -> STRING . NAME vardecnames
    (11) vardecnames -> STRING . NAME

    NAME            shift and go to state 76


state 45

    (8) vardecnames -> ARRAY . NAME vardecnames
    (12) vardecnames -> ARRAY . NAME

    NAME            shift and go to state 77


state 46

    (5) vardecnames -> INTEGER . NAME vardecnames
    (9) vardecnames -> INTEGER . NAME

    NAME            shift and go to state 78


state 47

    (4) init -> VARIABLES { vardecnames . }

    }               shift and go to state 79


state 48

    (6) vardecnames -> FLOAT . NAME vardecnames
    (10) vardecnames -> FLOAT . NAME

    NAME            shift and go to state 80


state 49

    (24) statement -> HABANG ( cond ) . { body }

    {               shift and go to state 81


state 50

    (50) expression -> HABA ( . NAME )

    NAME            shift and go to state 82


state 51

    (35) expression -> expression PLUS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 83

state 52

    (32) cond -> expression LTE . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 84

state 53

    (34) cond -> expression GT . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 85

state 54

    (37) expression -> expression TIMES . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 86

state 55

    (36) expression -> expression MINUS . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 87

state 56

    (39) expression -> expression POWER . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 88

state 57

    (40) expression -> expression MODULO . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 89

state 58

    (30) cond -> expression NE . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 90

state 59

    (33) cond -> expression LT . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 91

state 60

    (38) expression -> expression DIVIDE . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 92

state 61

    (31) cond -> expression GTE . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 93

state 62

    (29) cond -> expression ISEQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 94

state 63

    (55) expression -> NAME [ . expression ]
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 95

state 64

    (41) expression -> MINUS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 41 (expression -> MINUS expression .)
    PLUS            reduce using rule 41 (expression -> MINUS expression .)
    MINUS           reduce using rule 41 (expression -> MINUS expression .)
    TIMES           reduce using rule 41 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 41 (expression -> MINUS expression .)
    POWER           reduce using rule 41 (expression -> MINUS expression .)
    MODULO          reduce using rule 41 (expression -> MINUS expression .)
    PAKITA          reduce using rule 41 (expression -> MINUS expression .)
    BASA            reduce using rule 41 (expression -> MINUS expression .)
    NAME            reduce using rule 41 (expression -> MINUS expression .)
    DAGDAG          reduce using rule 41 (expression -> MINUS expression .)
    BURA            reduce using rule 41 (expression -> MINUS expression .)
    PAG             reduce using rule 41 (expression -> MINUS expression .)
    HABANG          reduce using rule 41 (expression -> MINUS expression .)
    $end            reduce using rule 41 (expression -> MINUS expression .)
    }               reduce using rule 41 (expression -> MINUS expression .)
    ISEQUAL         reduce using rule 41 (expression -> MINUS expression .)
    NE              reduce using rule 41 (expression -> MINUS expression .)
    GTE             reduce using rule 41 (expression -> MINUS expression .)
    LTE             reduce using rule 41 (expression -> MINUS expression .)
    LT              reduce using rule 41 (expression -> MINUS expression .)
    GT              reduce using rule 41 (expression -> MINUS expression .)
    )               reduce using rule 41 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! POWER           [ shift and go to state 56 ]
  ! MODULO          [ shift and go to state 57 ]


state 65

    (47) expression -> SAMA ( . NAME , NAME )
    (48) expression -> SAMA ( . NAME , LITSTRING )
    (49) expression -> SAMA ( . LITSTRING , NAME )

    NAME            shift and go to state 97
    LITSTRING       shift and go to state 96


state 66

    (51) expression -> HANAP ( . NAME , NAME )
    (52) expression -> HANAP ( . NAME , LITSTRING )
    (53) expression -> HANAP ( . LITSTRING , NAME )

    NAME            shift and go to state 99
    LITSTRING       shift and go to state 98


state 67

    (42) expression -> ( expression . )
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               shift and go to state 100
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 68

    (54) expression -> SA ( . NAME , expression )

    NAME            shift and go to state 101


state 69

    (16) statement -> PAKITA ( LITSTRING ) .

    PAKITA          reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    BASA            reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    NAME            reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    DAGDAG          reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    BURA            reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    PAG             reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    HABANG          reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    $end            reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)
    }               reduce using rule 16 (statement -> PAKITA ( LITSTRING ) .)


state 70

    (15) statement -> PAKITA ( NAME ) .

    PAKITA          reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    BASA            reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    NAME            reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    DAGDAG          reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    BURA            reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    PAG             reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    HABANG          reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    $end            reduce using rule 15 (statement -> PAKITA ( NAME ) .)
    }               reduce using rule 15 (statement -> PAKITA ( NAME ) .)


state 71

    (21) statement -> BURA ( NAME , . expression )
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 102

state 72

    (19) statement -> NAME [ expression ] . EQUAL expression

    EQUAL           shift and go to state 103


state 73

    (17) statement -> BASA ( NAME ) .

    PAKITA          reduce using rule 17 (statement -> BASA ( NAME ) .)
    BASA            reduce using rule 17 (statement -> BASA ( NAME ) .)
    NAME            reduce using rule 17 (statement -> BASA ( NAME ) .)
    DAGDAG          reduce using rule 17 (statement -> BASA ( NAME ) .)
    BURA            reduce using rule 17 (statement -> BASA ( NAME ) .)
    PAG             reduce using rule 17 (statement -> BASA ( NAME ) .)
    HABANG          reduce using rule 17 (statement -> BASA ( NAME ) .)
    $end            reduce using rule 17 (statement -> BASA ( NAME ) .)
    }               reduce using rule 17 (statement -> BASA ( NAME ) .)


state 74

    (22) statement -> PAG ( cond ) . { body }
    (23) statement -> PAG ( cond ) . { body } elseblocks

    {               shift and go to state 104


state 75

    (20) statement -> DAGDAG ( NAME , . expression )
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 105

state 76

    (7) vardecnames -> STRING NAME . vardecnames
    (11) vardecnames -> STRING NAME .
    (5) vardecnames -> . INTEGER NAME vardecnames
    (6) vardecnames -> . FLOAT NAME vardecnames
    (7) vardecnames -> . STRING NAME vardecnames
    (8) vardecnames -> . ARRAY NAME vardecnames
    (9) vardecnames -> . INTEGER NAME
    (10) vardecnames -> . FLOAT NAME
    (11) vardecnames -> . STRING NAME
    (12) vardecnames -> . ARRAY NAME

    }               reduce using rule 11 (vardecnames -> STRING NAME .)
    INTEGER         shift and go to state 46
    FLOAT           shift and go to state 48
    STRING          shift and go to state 44
    ARRAY           shift and go to state 45

    vardecnames                    shift and go to state 106

state 77

    (8) vardecnames -> ARRAY NAME . vardecnames
    (12) vardecnames -> ARRAY NAME .
    (5) vardecnames -> . INTEGER NAME vardecnames
    (6) vardecnames -> . FLOAT NAME vardecnames
    (7) vardecnames -> . STRING NAME vardecnames
    (8) vardecnames -> . ARRAY NAME vardecnames
    (9) vardecnames -> . INTEGER NAME
    (10) vardecnames -> . FLOAT NAME
    (11) vardecnames -> . STRING NAME
    (12) vardecnames -> . ARRAY NAME

    }               reduce using rule 12 (vardecnames -> ARRAY NAME .)
    INTEGER         shift and go to state 46
    FLOAT           shift and go to state 48
    STRING          shift and go to state 44
    ARRAY           shift and go to state 45

    vardecnames                    shift and go to state 107

state 78

    (5) vardecnames -> INTEGER NAME . vardecnames
    (9) vardecnames -> INTEGER NAME .
    (5) vardecnames -> . INTEGER NAME vardecnames
    (6) vardecnames -> . FLOAT NAME vardecnames
    (7) vardecnames -> . STRING NAME vardecnames
    (8) vardecnames -> . ARRAY NAME vardecnames
    (9) vardecnames -> . INTEGER NAME
    (10) vardecnames -> . FLOAT NAME
    (11) vardecnames -> . STRING NAME
    (12) vardecnames -> . ARRAY NAME

    }               reduce using rule 9 (vardecnames -> INTEGER NAME .)
    INTEGER         shift and go to state 46
    FLOAT           shift and go to state 48
    STRING          shift and go to state 44
    ARRAY           shift and go to state 45

    vardecnames                    shift and go to state 108

state 79

    (4) init -> VARIABLES { vardecnames } .

    PAKITA          reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    BASA            reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    NAME            reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    DAGDAG          reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    BURA            reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    PAG             reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    HABANG          reduce using rule 4 (init -> VARIABLES { vardecnames } .)
    $end            reduce using rule 4 (init -> VARIABLES { vardecnames } .)


state 80

    (6) vardecnames -> FLOAT NAME . vardecnames
    (10) vardecnames -> FLOAT NAME .
    (5) vardecnames -> . INTEGER NAME vardecnames
    (6) vardecnames -> . FLOAT NAME vardecnames
    (7) vardecnames -> . STRING NAME vardecnames
    (8) vardecnames -> . ARRAY NAME vardecnames
    (9) vardecnames -> . INTEGER NAME
    (10) vardecnames -> . FLOAT NAME
    (11) vardecnames -> . STRING NAME
    (12) vardecnames -> . ARRAY NAME

    }               reduce using rule 10 (vardecnames -> FLOAT NAME .)
    INTEGER         shift and go to state 46
    FLOAT           shift and go to state 48
    STRING          shift and go to state 44
    ARRAY           shift and go to state 45

    vardecnames                    shift and go to state 109

state 81

    (24) statement -> HABANG ( cond ) { . body }
    (13) body -> . body statement
    (14) body -> . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 3
    body                           shift and go to state 110

state 82

    (50) expression -> HABA ( NAME . )

    )               shift and go to state 111


state 83

    (35) expression -> expression PLUS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 35 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 35 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 35 (expression -> expression PLUS expression .)
    PAKITA          reduce using rule 35 (expression -> expression PLUS expression .)
    BASA            reduce using rule 35 (expression -> expression PLUS expression .)
    NAME            reduce using rule 35 (expression -> expression PLUS expression .)
    DAGDAG          reduce using rule 35 (expression -> expression PLUS expression .)
    BURA            reduce using rule 35 (expression -> expression PLUS expression .)
    PAG             reduce using rule 35 (expression -> expression PLUS expression .)
    HABANG          reduce using rule 35 (expression -> expression PLUS expression .)
    $end            reduce using rule 35 (expression -> expression PLUS expression .)
    }               reduce using rule 35 (expression -> expression PLUS expression .)
    ISEQUAL         reduce using rule 35 (expression -> expression PLUS expression .)
    NE              reduce using rule 35 (expression -> expression PLUS expression .)
    GTE             reduce using rule 35 (expression -> expression PLUS expression .)
    LTE             reduce using rule 35 (expression -> expression PLUS expression .)
    LT              reduce using rule 35 (expression -> expression PLUS expression .)
    GT              reduce using rule 35 (expression -> expression PLUS expression .)
    )               reduce using rule 35 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57

  ! TIMES           [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 35 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]


state 84

    (32) cond -> expression LTE expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               reduce using rule 32 (cond -> expression LTE expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 85

    (34) cond -> expression GT expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               reduce using rule 34 (cond -> expression GT expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 86

    (37) expression -> expression TIMES expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 37 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 37 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 37 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 37 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 37 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 37 (expression -> expression TIMES expression .)
    PAKITA          reduce using rule 37 (expression -> expression TIMES expression .)
    BASA            reduce using rule 37 (expression -> expression TIMES expression .)
    NAME            reduce using rule 37 (expression -> expression TIMES expression .)
    DAGDAG          reduce using rule 37 (expression -> expression TIMES expression .)
    BURA            reduce using rule 37 (expression -> expression TIMES expression .)
    PAG             reduce using rule 37 (expression -> expression TIMES expression .)
    HABANG          reduce using rule 37 (expression -> expression TIMES expression .)
    $end            reduce using rule 37 (expression -> expression TIMES expression .)
    }               reduce using rule 37 (expression -> expression TIMES expression .)
    ISEQUAL         reduce using rule 37 (expression -> expression TIMES expression .)
    NE              reduce using rule 37 (expression -> expression TIMES expression .)
    GTE             reduce using rule 37 (expression -> expression TIMES expression .)
    LTE             reduce using rule 37 (expression -> expression TIMES expression .)
    LT              reduce using rule 37 (expression -> expression TIMES expression .)
    GT              reduce using rule 37 (expression -> expression TIMES expression .)
    )               reduce using rule 37 (expression -> expression TIMES expression .)
    POWER           shift and go to state 56

  ! POWER           [ reduce using rule 37 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MODULO          [ shift and go to state 57 ]


state 87

    (36) expression -> expression MINUS expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 36 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 36 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 36 (expression -> expression MINUS expression .)
    PAKITA          reduce using rule 36 (expression -> expression MINUS expression .)
    BASA            reduce using rule 36 (expression -> expression MINUS expression .)
    NAME            reduce using rule 36 (expression -> expression MINUS expression .)
    DAGDAG          reduce using rule 36 (expression -> expression MINUS expression .)
    BURA            reduce using rule 36 (expression -> expression MINUS expression .)
    PAG             reduce using rule 36 (expression -> expression MINUS expression .)
    HABANG          reduce using rule 36 (expression -> expression MINUS expression .)
    $end            reduce using rule 36 (expression -> expression MINUS expression .)
    }               reduce using rule 36 (expression -> expression MINUS expression .)
    ISEQUAL         reduce using rule 36 (expression -> expression MINUS expression .)
    NE              reduce using rule 36 (expression -> expression MINUS expression .)
    GTE             reduce using rule 36 (expression -> expression MINUS expression .)
    LTE             reduce using rule 36 (expression -> expression MINUS expression .)
    LT              reduce using rule 36 (expression -> expression MINUS expression .)
    GT              reduce using rule 36 (expression -> expression MINUS expression .)
    )               reduce using rule 36 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57

  ! TIMES           [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]


state 88

    (39) expression -> expression POWER expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 39 (expression -> expression POWER expression .)
    PLUS            reduce using rule 39 (expression -> expression POWER expression .)
    MINUS           reduce using rule 39 (expression -> expression POWER expression .)
    TIMES           reduce using rule 39 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 39 (expression -> expression POWER expression .)
    MODULO          reduce using rule 39 (expression -> expression POWER expression .)
    PAKITA          reduce using rule 39 (expression -> expression POWER expression .)
    BASA            reduce using rule 39 (expression -> expression POWER expression .)
    NAME            reduce using rule 39 (expression -> expression POWER expression .)
    DAGDAG          reduce using rule 39 (expression -> expression POWER expression .)
    BURA            reduce using rule 39 (expression -> expression POWER expression .)
    PAG             reduce using rule 39 (expression -> expression POWER expression .)
    HABANG          reduce using rule 39 (expression -> expression POWER expression .)
    $end            reduce using rule 39 (expression -> expression POWER expression .)
    }               reduce using rule 39 (expression -> expression POWER expression .)
    ISEQUAL         reduce using rule 39 (expression -> expression POWER expression .)
    NE              reduce using rule 39 (expression -> expression POWER expression .)
    GTE             reduce using rule 39 (expression -> expression POWER expression .)
    LTE             reduce using rule 39 (expression -> expression POWER expression .)
    LT              reduce using rule 39 (expression -> expression POWER expression .)
    GT              reduce using rule 39 (expression -> expression POWER expression .)
    )               reduce using rule 39 (expression -> expression POWER expression .)
    POWER           shift and go to state 56

  ! POWER           [ reduce using rule 39 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MODULO          [ shift and go to state 57 ]


state 89

    (40) expression -> expression MODULO expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 40 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 40 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 40 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 40 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 40 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 40 (expression -> expression MODULO expression .)
    PAKITA          reduce using rule 40 (expression -> expression MODULO expression .)
    BASA            reduce using rule 40 (expression -> expression MODULO expression .)
    NAME            reduce using rule 40 (expression -> expression MODULO expression .)
    DAGDAG          reduce using rule 40 (expression -> expression MODULO expression .)
    BURA            reduce using rule 40 (expression -> expression MODULO expression .)
    PAG             reduce using rule 40 (expression -> expression MODULO expression .)
    HABANG          reduce using rule 40 (expression -> expression MODULO expression .)
    $end            reduce using rule 40 (expression -> expression MODULO expression .)
    }               reduce using rule 40 (expression -> expression MODULO expression .)
    ISEQUAL         reduce using rule 40 (expression -> expression MODULO expression .)
    NE              reduce using rule 40 (expression -> expression MODULO expression .)
    GTE             reduce using rule 40 (expression -> expression MODULO expression .)
    LTE             reduce using rule 40 (expression -> expression MODULO expression .)
    LT              reduce using rule 40 (expression -> expression MODULO expression .)
    GT              reduce using rule 40 (expression -> expression MODULO expression .)
    )               reduce using rule 40 (expression -> expression MODULO expression .)
    POWER           shift and go to state 56

  ! POWER           [ reduce using rule 40 (expression -> expression MODULO expression .) ]
  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MODULO          [ shift and go to state 57 ]


state 90

    (30) cond -> expression NE expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               reduce using rule 30 (cond -> expression NE expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 91

    (33) cond -> expression LT expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               reduce using rule 33 (cond -> expression LT expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 92

    (38) expression -> expression DIVIDE expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               reduce using rule 38 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 38 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 38 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 38 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 38 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 38 (expression -> expression DIVIDE expression .)
    PAKITA          reduce using rule 38 (expression -> expression DIVIDE expression .)
    BASA            reduce using rule 38 (expression -> expression DIVIDE expression .)
    NAME            reduce using rule 38 (expression -> expression DIVIDE expression .)
    DAGDAG          reduce using rule 38 (expression -> expression DIVIDE expression .)
    BURA            reduce using rule 38 (expression -> expression DIVIDE expression .)
    PAG             reduce using rule 38 (expression -> expression DIVIDE expression .)
    HABANG          reduce using rule 38 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 38 (expression -> expression DIVIDE expression .)
    }               reduce using rule 38 (expression -> expression DIVIDE expression .)
    ISEQUAL         reduce using rule 38 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 38 (expression -> expression DIVIDE expression .)
    GTE             reduce using rule 38 (expression -> expression DIVIDE expression .)
    LTE             reduce using rule 38 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 38 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 38 (expression -> expression DIVIDE expression .)
    )               reduce using rule 38 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 56

  ! POWER           [ reduce using rule 38 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 60 ]
  ! MODULO          [ shift and go to state 57 ]


state 93

    (31) cond -> expression GTE expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               reduce using rule 31 (cond -> expression GTE expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 94

    (29) cond -> expression ISEQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               reduce using rule 29 (cond -> expression ISEQUAL expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 95

    (55) expression -> NAME [ expression . ]
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    ]               shift and go to state 112
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 96

    (49) expression -> SAMA ( LITSTRING . , NAME )

    ,               shift and go to state 113


state 97

    (47) expression -> SAMA ( NAME . , NAME )
    (48) expression -> SAMA ( NAME . , LITSTRING )

    ,               shift and go to state 114


state 98

    (53) expression -> HANAP ( LITSTRING . , NAME )

    ,               shift and go to state 115


state 99

    (51) expression -> HANAP ( NAME . , NAME )
    (52) expression -> HANAP ( NAME . , LITSTRING )

    ,               shift and go to state 116


state 100

    (42) expression -> ( expression ) .

    ]               reduce using rule 42 (expression -> ( expression ) .)
    PLUS            reduce using rule 42 (expression -> ( expression ) .)
    MINUS           reduce using rule 42 (expression -> ( expression ) .)
    TIMES           reduce using rule 42 (expression -> ( expression ) .)
    DIVIDE          reduce using rule 42 (expression -> ( expression ) .)
    POWER           reduce using rule 42 (expression -> ( expression ) .)
    MODULO          reduce using rule 42 (expression -> ( expression ) .)
    PAKITA          reduce using rule 42 (expression -> ( expression ) .)
    BASA            reduce using rule 42 (expression -> ( expression ) .)
    NAME            reduce using rule 42 (expression -> ( expression ) .)
    DAGDAG          reduce using rule 42 (expression -> ( expression ) .)
    BURA            reduce using rule 42 (expression -> ( expression ) .)
    PAG             reduce using rule 42 (expression -> ( expression ) .)
    HABANG          reduce using rule 42 (expression -> ( expression ) .)
    $end            reduce using rule 42 (expression -> ( expression ) .)
    }               reduce using rule 42 (expression -> ( expression ) .)
    ISEQUAL         reduce using rule 42 (expression -> ( expression ) .)
    NE              reduce using rule 42 (expression -> ( expression ) .)
    GTE             reduce using rule 42 (expression -> ( expression ) .)
    LTE             reduce using rule 42 (expression -> ( expression ) .)
    LT              reduce using rule 42 (expression -> ( expression ) .)
    GT              reduce using rule 42 (expression -> ( expression ) .)
    )               reduce using rule 42 (expression -> ( expression ) .)


state 101

    (54) expression -> SA ( NAME . , expression )

    ,               shift and go to state 117


state 102

    (21) statement -> BURA ( NAME , expression . )
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               shift and go to state 118
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 103

    (19) statement -> NAME [ expression ] EQUAL . expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 119

state 104

    (22) statement -> PAG ( cond ) { . body }
    (23) statement -> PAG ( cond ) { . body } elseblocks
    (13) body -> . body statement
    (14) body -> . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 3
    body                           shift and go to state 120

state 105

    (20) statement -> DAGDAG ( NAME , expression . )
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               shift and go to state 121
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 106

    (7) vardecnames -> STRING NAME vardecnames .

    }               reduce using rule 7 (vardecnames -> STRING NAME vardecnames .)


state 107

    (8) vardecnames -> ARRAY NAME vardecnames .

    }               reduce using rule 8 (vardecnames -> ARRAY NAME vardecnames .)


state 108

    (5) vardecnames -> INTEGER NAME vardecnames .

    }               reduce using rule 5 (vardecnames -> INTEGER NAME vardecnames .)


state 109

    (6) vardecnames -> FLOAT NAME vardecnames .

    }               reduce using rule 6 (vardecnames -> FLOAT NAME vardecnames .)


state 110

    (24) statement -> HABANG ( cond ) { body . }
    (13) body -> body . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    }               shift and go to state 122
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 15

state 111

    (50) expression -> HABA ( NAME ) .

    ]               reduce using rule 50 (expression -> HABA ( NAME ) .)
    PLUS            reduce using rule 50 (expression -> HABA ( NAME ) .)
    MINUS           reduce using rule 50 (expression -> HABA ( NAME ) .)
    TIMES           reduce using rule 50 (expression -> HABA ( NAME ) .)
    DIVIDE          reduce using rule 50 (expression -> HABA ( NAME ) .)
    POWER           reduce using rule 50 (expression -> HABA ( NAME ) .)
    MODULO          reduce using rule 50 (expression -> HABA ( NAME ) .)
    PAKITA          reduce using rule 50 (expression -> HABA ( NAME ) .)
    BASA            reduce using rule 50 (expression -> HABA ( NAME ) .)
    NAME            reduce using rule 50 (expression -> HABA ( NAME ) .)
    DAGDAG          reduce using rule 50 (expression -> HABA ( NAME ) .)
    BURA            reduce using rule 50 (expression -> HABA ( NAME ) .)
    PAG             reduce using rule 50 (expression -> HABA ( NAME ) .)
    HABANG          reduce using rule 50 (expression -> HABA ( NAME ) .)
    $end            reduce using rule 50 (expression -> HABA ( NAME ) .)
    }               reduce using rule 50 (expression -> HABA ( NAME ) .)
    ISEQUAL         reduce using rule 50 (expression -> HABA ( NAME ) .)
    NE              reduce using rule 50 (expression -> HABA ( NAME ) .)
    GTE             reduce using rule 50 (expression -> HABA ( NAME ) .)
    LTE             reduce using rule 50 (expression -> HABA ( NAME ) .)
    LT              reduce using rule 50 (expression -> HABA ( NAME ) .)
    GT              reduce using rule 50 (expression -> HABA ( NAME ) .)
    )               reduce using rule 50 (expression -> HABA ( NAME ) .)


state 112

    (55) expression -> NAME [ expression ] .

    ]               reduce using rule 55 (expression -> NAME [ expression ] .)
    PLUS            reduce using rule 55 (expression -> NAME [ expression ] .)
    MINUS           reduce using rule 55 (expression -> NAME [ expression ] .)
    TIMES           reduce using rule 55 (expression -> NAME [ expression ] .)
    DIVIDE          reduce using rule 55 (expression -> NAME [ expression ] .)
    POWER           reduce using rule 55 (expression -> NAME [ expression ] .)
    MODULO          reduce using rule 55 (expression -> NAME [ expression ] .)
    PAKITA          reduce using rule 55 (expression -> NAME [ expression ] .)
    BASA            reduce using rule 55 (expression -> NAME [ expression ] .)
    NAME            reduce using rule 55 (expression -> NAME [ expression ] .)
    DAGDAG          reduce using rule 55 (expression -> NAME [ expression ] .)
    BURA            reduce using rule 55 (expression -> NAME [ expression ] .)
    PAG             reduce using rule 55 (expression -> NAME [ expression ] .)
    HABANG          reduce using rule 55 (expression -> NAME [ expression ] .)
    $end            reduce using rule 55 (expression -> NAME [ expression ] .)
    }               reduce using rule 55 (expression -> NAME [ expression ] .)
    ISEQUAL         reduce using rule 55 (expression -> NAME [ expression ] .)
    NE              reduce using rule 55 (expression -> NAME [ expression ] .)
    GTE             reduce using rule 55 (expression -> NAME [ expression ] .)
    LTE             reduce using rule 55 (expression -> NAME [ expression ] .)
    LT              reduce using rule 55 (expression -> NAME [ expression ] .)
    GT              reduce using rule 55 (expression -> NAME [ expression ] .)
    )               reduce using rule 55 (expression -> NAME [ expression ] .)


state 113

    (49) expression -> SAMA ( LITSTRING , . NAME )

    NAME            shift and go to state 123


state 114

    (47) expression -> SAMA ( NAME , . NAME )
    (48) expression -> SAMA ( NAME , . LITSTRING )

    NAME            shift and go to state 125
    LITSTRING       shift and go to state 124


state 115

    (53) expression -> HANAP ( LITSTRING , . NAME )

    NAME            shift and go to state 126


state 116

    (51) expression -> HANAP ( NAME , . NAME )
    (52) expression -> HANAP ( NAME , . LITSTRING )

    NAME            shift and go to state 128
    LITSTRING       shift and go to state 127


state 117

    (54) expression -> SA ( NAME , . expression )
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    expression                     shift and go to state 129

state 118

    (21) statement -> BURA ( NAME , expression ) .

    PAKITA          reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    BASA            reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    NAME            reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    DAGDAG          reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    BURA            reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    PAG             reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    HABANG          reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    $end            reduce using rule 21 (statement -> BURA ( NAME , expression ) .)
    }               reduce using rule 21 (statement -> BURA ( NAME , expression ) .)


state 119

    (19) statement -> NAME [ expression ] EQUAL expression .
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    PAKITA          reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    BASA            reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    NAME            reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    DAGDAG          reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    BURA            reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    PAG             reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    HABANG          reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    $end            reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    }               reduce using rule 19 (statement -> NAME [ expression ] EQUAL expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 120

    (22) statement -> PAG ( cond ) { body . }
    (23) statement -> PAG ( cond ) { body . } elseblocks
    (13) body -> body . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    }               shift and go to state 130
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 15

state 121

    (20) statement -> DAGDAG ( NAME , expression ) .

    PAKITA          reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    BASA            reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    NAME            reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    DAGDAG          reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    BURA            reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    PAG             reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    HABANG          reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    $end            reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)
    }               reduce using rule 20 (statement -> DAGDAG ( NAME , expression ) .)


state 122

    (24) statement -> HABANG ( cond ) { body } .

    PAKITA          reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    BASA            reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    NAME            reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    DAGDAG          reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    BURA            reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    PAG             reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    HABANG          reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    $end            reduce using rule 24 (statement -> HABANG ( cond ) { body } .)
    }               reduce using rule 24 (statement -> HABANG ( cond ) { body } .)


state 123

    (49) expression -> SAMA ( LITSTRING , NAME . )

    )               shift and go to state 131


state 124

    (48) expression -> SAMA ( NAME , LITSTRING . )

    )               shift and go to state 132


state 125

    (47) expression -> SAMA ( NAME , NAME . )

    )               shift and go to state 133


state 126

    (53) expression -> HANAP ( LITSTRING , NAME . )

    )               shift and go to state 134


state 127

    (52) expression -> HANAP ( NAME , LITSTRING . )

    )               shift and go to state 135


state 128

    (51) expression -> HANAP ( NAME , NAME . )

    )               shift and go to state 136


state 129

    (54) expression -> SA ( NAME , expression . )
    (35) expression -> expression . PLUS expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . TIMES expression
    (38) expression -> expression . DIVIDE expression
    (39) expression -> expression . POWER expression
    (40) expression -> expression . MODULO expression

    )               shift and go to state 137
    PLUS            shift and go to state 51
    MINUS           shift and go to state 55
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 60
    POWER           shift and go to state 56
    MODULO          shift and go to state 57


state 130

    (22) statement -> PAG ( cond ) { body } .
    (23) statement -> PAG ( cond ) { body } . elseblocks
    (25) elseblocks -> . elseifblock
    (26) elseblocks -> . elseblock
    (28) elseifblock -> . KUNDIPAG ( cond ) { body } elseblocks
    (27) elseblock -> . KUNDI { body }

    PAKITA          reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    BASA            reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    NAME            reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    DAGDAG          reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    BURA            reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    PAG             reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    HABANG          reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    $end            reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    }               reduce using rule 22 (statement -> PAG ( cond ) { body } .)
    KUNDIPAG        shift and go to state 141
    KUNDI           shift and go to state 139

    elseblock                      shift and go to state 138
    elseblocks                     shift and go to state 140
    elseifblock                    shift and go to state 142

state 131

    (49) expression -> SAMA ( LITSTRING , NAME ) .

    ]               reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    PLUS            reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    MINUS           reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    TIMES           reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    DIVIDE          reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    POWER           reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    MODULO          reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    PAKITA          reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    BASA            reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    NAME            reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    DAGDAG          reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    BURA            reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    PAG             reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    HABANG          reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    $end            reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    }               reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    ISEQUAL         reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    NE              reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    GTE             reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    LTE             reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    LT              reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    GT              reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)
    )               reduce using rule 49 (expression -> SAMA ( LITSTRING , NAME ) .)


state 132

    (48) expression -> SAMA ( NAME , LITSTRING ) .

    ]               reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    PLUS            reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    MINUS           reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    TIMES           reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    DIVIDE          reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    POWER           reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    MODULO          reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    PAKITA          reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    BASA            reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    NAME            reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    DAGDAG          reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    BURA            reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    PAG             reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    HABANG          reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    $end            reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    }               reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    ISEQUAL         reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    NE              reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    GTE             reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    LTE             reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    LT              reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    GT              reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)
    )               reduce using rule 48 (expression -> SAMA ( NAME , LITSTRING ) .)


state 133

    (47) expression -> SAMA ( NAME , NAME ) .

    ]               reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    PLUS            reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    MINUS           reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    TIMES           reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    DIVIDE          reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    POWER           reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    MODULO          reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    PAKITA          reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    BASA            reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    NAME            reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    DAGDAG          reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    BURA            reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    PAG             reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    HABANG          reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    $end            reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    }               reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    ISEQUAL         reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    NE              reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    GTE             reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    LTE             reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    LT              reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    GT              reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)
    )               reduce using rule 47 (expression -> SAMA ( NAME , NAME ) .)


state 134

    (53) expression -> HANAP ( LITSTRING , NAME ) .

    ]               reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    PLUS            reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    MINUS           reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    TIMES           reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    DIVIDE          reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    POWER           reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    MODULO          reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    PAKITA          reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    BASA            reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    NAME            reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    DAGDAG          reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    BURA            reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    PAG             reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    HABANG          reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    $end            reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    }               reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    ISEQUAL         reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    NE              reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    GTE             reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    LTE             reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    LT              reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    GT              reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)
    )               reduce using rule 53 (expression -> HANAP ( LITSTRING , NAME ) .)


state 135

    (52) expression -> HANAP ( NAME , LITSTRING ) .

    ]               reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    PLUS            reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    MINUS           reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    TIMES           reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    DIVIDE          reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    POWER           reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    MODULO          reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    PAKITA          reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    BASA            reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    NAME            reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    DAGDAG          reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    BURA            reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    PAG             reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    HABANG          reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    $end            reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    }               reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    ISEQUAL         reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    NE              reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    GTE             reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    LTE             reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    LT              reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    GT              reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)
    )               reduce using rule 52 (expression -> HANAP ( NAME , LITSTRING ) .)


state 136

    (51) expression -> HANAP ( NAME , NAME ) .

    ]               reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    PLUS            reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    MINUS           reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    TIMES           reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    DIVIDE          reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    POWER           reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    MODULO          reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    PAKITA          reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    BASA            reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    NAME            reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    DAGDAG          reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    BURA            reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    PAG             reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    HABANG          reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    $end            reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    }               reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    ISEQUAL         reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    NE              reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    GTE             reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    LTE             reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    LT              reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    GT              reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)
    )               reduce using rule 51 (expression -> HANAP ( NAME , NAME ) .)


state 137

    (54) expression -> SA ( NAME , expression ) .

    ]               reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    PLUS            reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    MINUS           reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    TIMES           reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    DIVIDE          reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    POWER           reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    MODULO          reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    PAKITA          reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    BASA            reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    NAME            reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    DAGDAG          reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    BURA            reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    PAG             reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    HABANG          reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    $end            reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    }               reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    ISEQUAL         reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    NE              reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    GTE             reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    LTE             reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    LT              reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    GT              reduce using rule 54 (expression -> SA ( NAME , expression ) .)
    )               reduce using rule 54 (expression -> SA ( NAME , expression ) .)


state 138

    (26) elseblocks -> elseblock .

    PAKITA          reduce using rule 26 (elseblocks -> elseblock .)
    BASA            reduce using rule 26 (elseblocks -> elseblock .)
    NAME            reduce using rule 26 (elseblocks -> elseblock .)
    DAGDAG          reduce using rule 26 (elseblocks -> elseblock .)
    BURA            reduce using rule 26 (elseblocks -> elseblock .)
    PAG             reduce using rule 26 (elseblocks -> elseblock .)
    HABANG          reduce using rule 26 (elseblocks -> elseblock .)
    $end            reduce using rule 26 (elseblocks -> elseblock .)
    }               reduce using rule 26 (elseblocks -> elseblock .)


state 139

    (27) elseblock -> KUNDI . { body }

    {               shift and go to state 143


state 140

    (23) statement -> PAG ( cond ) { body } elseblocks .

    PAKITA          reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    BASA            reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    NAME            reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    DAGDAG          reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    BURA            reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    PAG             reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    HABANG          reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    $end            reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)
    }               reduce using rule 23 (statement -> PAG ( cond ) { body } elseblocks .)


state 141

    (28) elseifblock -> KUNDIPAG . ( cond ) { body } elseblocks

    (               shift and go to state 144


state 142

    (25) elseblocks -> elseifblock .

    PAKITA          reduce using rule 25 (elseblocks -> elseifblock .)
    BASA            reduce using rule 25 (elseblocks -> elseifblock .)
    NAME            reduce using rule 25 (elseblocks -> elseifblock .)
    DAGDAG          reduce using rule 25 (elseblocks -> elseifblock .)
    BURA            reduce using rule 25 (elseblocks -> elseifblock .)
    PAG             reduce using rule 25 (elseblocks -> elseifblock .)
    HABANG          reduce using rule 25 (elseblocks -> elseifblock .)
    $end            reduce using rule 25 (elseblocks -> elseifblock .)
    }               reduce using rule 25 (elseblocks -> elseifblock .)


state 143

    (27) elseblock -> KUNDI { . body }
    (13) body -> . body statement
    (14) body -> . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 3
    body                           shift and go to state 145

state 144

    (28) elseifblock -> KUNDIPAG ( . cond ) { body } elseblocks
    (29) cond -> . expression ISEQUAL expression
    (30) cond -> . expression NE expression
    (31) cond -> . expression GTE expression
    (32) cond -> . expression LTE expression
    (33) cond -> . expression LT expression
    (34) cond -> . expression GT expression
    (35) expression -> . expression PLUS expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression TIMES expression
    (38) expression -> . expression DIVIDE expression
    (39) expression -> . expression POWER expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . MINUS expression
    (42) expression -> . ( expression )
    (43) expression -> . LITSTRING
    (44) expression -> . LITINTEGER
    (45) expression -> . LITFLOAT
    (46) expression -> . NAME
    (47) expression -> . SAMA ( NAME , NAME )
    (48) expression -> . SAMA ( NAME , LITSTRING )
    (49) expression -> . SAMA ( LITSTRING , NAME )
    (50) expression -> . HABA ( NAME )
    (51) expression -> . HANAP ( NAME , NAME )
    (52) expression -> . HANAP ( NAME , LITSTRING )
    (53) expression -> . HANAP ( LITSTRING , NAME )
    (54) expression -> . SA ( NAME , expression )
    (55) expression -> . NAME [ expression ]

    MINUS           shift and go to state 30
    (               shift and go to state 33
    LITSTRING       shift and go to state 29
    LITINTEGER      shift and go to state 26
    LITFLOAT        shift and go to state 34
    NAME            shift and go to state 28
    SAMA            shift and go to state 31
    HABA            shift and go to state 25
    HANAP           shift and go to state 32
    SA              shift and go to state 35

    cond                           shift and go to state 146
    expression                     shift and go to state 27

state 145

    (27) elseblock -> KUNDI { body . }
    (13) body -> body . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    }               shift and go to state 147
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 15

state 146

    (28) elseifblock -> KUNDIPAG ( cond . ) { body } elseblocks

    )               shift and go to state 148


state 147

    (27) elseblock -> KUNDI { body } .

    PAKITA          reduce using rule 27 (elseblock -> KUNDI { body } .)
    BASA            reduce using rule 27 (elseblock -> KUNDI { body } .)
    NAME            reduce using rule 27 (elseblock -> KUNDI { body } .)
    DAGDAG          reduce using rule 27 (elseblock -> KUNDI { body } .)
    BURA            reduce using rule 27 (elseblock -> KUNDI { body } .)
    PAG             reduce using rule 27 (elseblock -> KUNDI { body } .)
    HABANG          reduce using rule 27 (elseblock -> KUNDI { body } .)
    $end            reduce using rule 27 (elseblock -> KUNDI { body } .)
    }               reduce using rule 27 (elseblock -> KUNDI { body } .)


state 148

    (28) elseifblock -> KUNDIPAG ( cond ) . { body } elseblocks

    {               shift and go to state 149


state 149

    (28) elseifblock -> KUNDIPAG ( cond ) { . body } elseblocks
    (13) body -> . body statement
    (14) body -> . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 3
    body                           shift and go to state 150

state 150

    (28) elseifblock -> KUNDIPAG ( cond ) { body . } elseblocks
    (13) body -> body . statement
    (15) statement -> . PAKITA ( NAME )
    (16) statement -> . PAKITA ( LITSTRING )
    (17) statement -> . BASA ( NAME )
    (18) statement -> . NAME EQUAL expression
    (19) statement -> . NAME [ expression ] EQUAL expression
    (20) statement -> . DAGDAG ( NAME , expression )
    (21) statement -> . BURA ( NAME , expression )
    (22) statement -> . PAG ( cond ) { body }
    (23) statement -> . PAG ( cond ) { body } elseblocks
    (24) statement -> . HABANG ( cond ) { body }

    }               shift and go to state 151
    PAKITA          shift and go to state 2
    BASA            shift and go to state 8
    NAME            shift and go to state 7
    DAGDAG          shift and go to state 11
    BURA            shift and go to state 6
    PAG             shift and go to state 9
    HABANG          shift and go to state 1

    statement                      shift and go to state 15

state 151

    (28) elseifblock -> KUNDIPAG ( cond ) { body } . elseblocks
    (25) elseblocks -> . elseifblock
    (26) elseblocks -> . elseblock
    (28) elseifblock -> . KUNDIPAG ( cond ) { body } elseblocks
    (27) elseblock -> . KUNDI { body }

    KUNDIPAG        shift and go to state 141
    KUNDI           shift and go to state 139

    elseblock                      shift and go to state 138
    elseblocks                     shift and go to state 152
    elseifblock                    shift and go to state 142

state 152

    (28) elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .

    PAKITA          reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    BASA            reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    NAME            reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    DAGDAG          reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    BURA            reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    PAG             reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    HABANG          reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    $end            reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)
    }               reduce using rule 28 (elseifblock -> KUNDIPAG ( cond ) { body } elseblocks .)

